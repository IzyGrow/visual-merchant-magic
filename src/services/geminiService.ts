interface GeminiImageRequest {
  productImage: File;
  modelImage: File;
  prompt: string;
}

interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text?: string;
        inlineData?: {
          mimeType: string;
          data: string;
        };
      }>;
    };
  }>;
}

class GeminiService {
  private apiKey: string;
  private baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  private async fileToBase64(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64 = (reader.result as string).split(',')[1];
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  async generateMergedImage({ productImage, modelImage, prompt }: GeminiImageRequest): Promise<string> {
    try {
      const productBase64 = await this.fileToBase64(productImage);
      const modelBase64 = await this.fileToBase64(modelImage);

      const requestBody = {
        contents: [{
          parts: [
            {
              text: `Bu iki görseli birleştir: ${prompt}. Ürünü (ilk görsel) model görseli (ikinci görsel) üzerine doğal ve gerçekçi bir şekilde yerleştir. Sonucu tek bir yüksek kaliteli e-ticaret görseli olarak üret.`
            },
            {
              inlineData: {
                mimeType: productImage.type,
                data: productBase64
              }
            },
            {
              inlineData: {
                mimeType: modelImage.type,
                data: modelBase64
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.8,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        }
      };

      const response = await fetch(`${this.baseUrl}?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(`Gemini API Error: ${error.error?.message || 'Unknown error'}`);
      }

      const data: GeminiResponse = await response.json();
      
      if (!data.candidates || data.candidates.length === 0) {
        throw new Error('No response from Gemini API');
      }

      // Find image data in response
      const imagePart = data.candidates[0].content.parts.find(part => part.inlineData);
      
      if (!imagePart?.inlineData) {
        throw new Error('No image generated by Gemini API');
      }

      // Convert base64 to blob URL
      const imageData = `data:${imagePart.inlineData.mimeType};base64,${imagePart.inlineData.data}`;
      return imageData;

    } catch (error) {
      console.error('Gemini API Error:', error);
      throw error;
    }
  }
}

export default GeminiService;